[{"tvm_func_name": "tuned_depthwise_convolution_op_float_i128_128_56_56_w128_1_3_3_o128_128_56_56_ws1_1_wd1_1_p1_1_kernel0", "op_type": "QuantizeConvolution", "parameters": {"input_shape": [4, 32, 112, 112], "filter_shape": [64, 32, 1, 1], "output_shape": [4, 64, 112, 112], "window_movement_strides": [1, 1], "window_dilation_strides": [1, 1], "padding_below_diff": [0, 0], "identifier_suffix": "BatchNormInferenceRelu", "identifier_prefix": "Quantize", "in_quantize_bit": 8, "out_quantize_bit": 8}, "code": "// This kernel's input datatype and output datatype are all 8bit, using cuda core.\n\nextern \"C\" __global__ void MatrixMulCUDA_8bit_bias(float *input0, float *input1, float *input2, float *input3, float *input4, float *input5, float * input6,float  *input7, float *output0) \n{\n\n    const unsigned int M_GLOBAL=50176;\n    const unsigned int K_GLOBAL=32;\n    const unsigned int N_GLOBAL=64;\n    // const parameters\n    const unsigned int  WARP_SIZE=32;\n    const unsigned int  M=16;\n    const unsigned int  N=16;\n    const unsigned int  K=16;\n    const unsigned int  WMMA_M=16;\n    const unsigned int  WMMA_N=16;\n    const unsigned int  WMMA_K=16;\n\n    const unsigned int  M_TILES=3136;\n    const unsigned int  K_TILES=2;\n    const unsigned int  N_TILES=4;\n    \n\n\n    // typedef C_LAYOUT wmma::mem_row_major;\n\n    const unsigned int WARPS_PER_BLOCK=8;\n    const unsigned int THREADS_PER_BLOCK= (WARP_SIZE * WARPS_PER_BLOCK);\n    const unsigned int CHUNK_K=8;\n    const unsigned int CHUNK_LINE_BYTES=(CHUNK_K * K * sizeof(uint8_t));\n    const unsigned int WARP_COPY_BYTES=(WARP_SIZE * sizeof(int4));\n    const unsigned int CHUNK_COPY_LINES_PER_WARP=(WARP_COPY_BYTES / CHUNK_LINE_BYTES);\n    const unsigned int CHUNK_COPY_LINE_LANES=(WARP_SIZE / CHUNK_COPY_LINES_PER_WARP);\n    \n    const unsigned int BLOCK_ROW_WARPS=2;\n    const unsigned int BLOCK_COL_WARPS=4;\n    \n    const unsigned int WARP_ROW_TILES =4;\n    const unsigned int WARP_COL_TILES =2;\n    \n    const unsigned int BLOCK_ROW_TILES =(WARP_ROW_TILES * BLOCK_ROW_WARPS);\n    const unsigned int BLOCK_COL_TILES =(WARP_COL_TILES * BLOCK_COL_WARPS);\n    \n    const unsigned int GLOBAL_MEM_STRIDE =N_GLOBAL;\n    \n    const unsigned int SHMEM_STRIDE=(N * BLOCK_ROW_TILES);\n    const unsigned int SHMEM_OFFSET=(N * WARP_ROW_TILES);\n    \n    const unsigned int SKEW_UINT8=32;\n    \n\n    // Convert the input pointers\n    const uint8_t * A = reinterpret_cast<uint8_t*>(input0); // activation\n    const uint8_t * B =  reinterpret_cast<uint8_t*>(input1); // weight\n    const int * C = reinterpret_cast< int *>(input7);\n    uint8_t * D = reinterpret_cast<uint8_t*>(output0);\n    const int alpha = (int)(*input5);\n    const int integer = (int)(*input6);\n\n\n\nextern __shared__ uint8_t shmem[][CHUNK_K * K + SKEW_UINT8];\n\n// Warp and lane identification.\nconst unsigned int warpId = threadIdx.x / WARP_SIZE;\nconst unsigned int laneId = threadIdx.x % WARP_SIZE;\n\n// Offset in shared memory from which the B matrix is stored.\nconst size_t shmem_idx_b_off = BLOCK_COL_TILES * M;       // BLOCK_COL_TILES is shared_A row numbers in one block\n\n// This pointer is used to access the C and D matrix tiles this warp computes.\nint *shmem_warp_tile_ptr = (int *)&shmem[0][0] +\n(warpId / 2) * SHMEM_STRIDE * K * 2 +    // K * 2 is because one warp calculate k * 2 rows.\n(warpId % 2) * SHMEM_OFFSET;\n\n// This pointer is used to stream the C and D matrices block-wide tile to and\n// from shared memory.\nint *shmem_warp_stream_ptr = (int *)&shmem[0][0] + warpId * SHMEM_STRIDE * K;   // confuse, may be used to read from global memory?\n\n// Each CTA slides along the 128 x 128 tiles from the top left corner of the\n// matrix to the right and down, and selects the next tile to compute. Once\n// there's no such tile, all warps in this CTA exit.\nfor (unsigned int block_pos = blockIdx.x;; block_pos += gridDim.x) {\nconst unsigned int block_tile_i =                                   // get the i (row) index of all tiles\n((block_pos * BLOCK_ROW_TILES) / N_TILES) * (BLOCK_COL_TILES);\nconst unsigned int block_tile_j = (block_pos * BLOCK_COL_TILES) % N_TILES;\n\n// Stop when there are no more D matrix tiles to compute in this CTA.\nif (block_tile_i >= M_TILES) {\nbreak;\n}\n\n// This warp's pointer to the C matrix data to copy memory from to shared\n// memory.\nconst size_t gmem_idx =\n(block_tile_i + warpId) * M * GLOBAL_MEM_STRIDE + block_tile_j * N;\nconst int *src_gmem_warp_stream_ptr = &C[gmem_idx];\n\n// Stream multiple C tiles to shared memory.\n#pragma unroll\nfor (int i = 0; i < K; i++) {\ntypedef int4 copy_t;\n\n*((copy_t *)(shmem_warp_stream_ptr + SHMEM_STRIDE * i) + laneId) =\n*((copy_t *)(src_gmem_warp_stream_ptr + GLOBAL_MEM_STRIDE * i) +\nlaneId);\n}\n\n__syncthreads();\n\n// These fragments will accumulate the result of A and B matrix fragment\n// multiplications along the K_GLOBAL dimension.\nwmma::fragment<wmma::accumulator, M, N, K, int> c[WARP_COL_TILES]\n                       [WARP_ROW_TILES];\n\n// Load the C matrix tiles into fragments from shared memory.\n#pragma unroll\nfor (int i = 0; i < WARP_COL_TILES; i++) {\n#pragma unroll\nfor (int j = 0; j < WARP_ROW_TILES; j++) {\nconst int *tile_ptr =\nshmem_warp_tile_ptr + i * SHMEM_STRIDE * K + j * N;\n\nwmma::load_matrix_sync(c[i][j], tile_ptr, SHMEM_STRIDE, wmma::mem_row_major);\n}\n}\n\n__syncthreads();\n\n// Select what warp copies what matrix to shared memory.\n// Warps 0-3 copy the A matrix, warps 4-7 copy the B matrix.\nconst uint8_t *warp_ptr = (warpId < 4) ? (&A[block_tile_i * M * K_GLOBAL] +\n                M * K_GLOBAL * (warpId % 4) * 2)\n             : (&B[block_tile_j * N * K_GLOBAL] +\n                N * K_GLOBAL * (warpId % 4) * 2);\n\n// Go through the global K dimension by a fixed step at a time.\n#pragma unroll\nfor (int tile_k = 0; tile_k < K_TILES; tile_k += CHUNK_K) {\n// Copy slices of the A and B matrices to shared memory.\n// The first half of the warps in the CTA copy the A matrix, the rest copy\n// the B matrix.\nsize_t shmem_idx =\nwarpId < (WARPS_PER_BLOCK / 2)\n? (M * (warpId % (WARPS_PER_BLOCK / 2)) * 2)\n: (N * (warpId % (WARPS_PER_BLOCK / 2)) * 2 + shmem_idx_b_off);\n\n// First half of the warp copies the first row / column of the matrix,\n// the second half of the warp copies the next.\nint4 *lane_ptr = (int4 *)(warp_ptr + tile_k * K +\n  (laneId / CHUNK_COPY_LINE_LANES) * K_GLOBAL) +\n(laneId % CHUNK_COPY_LINE_LANES);\n\n// Shift the second half of the warp to the next row / column in the\n// shared memory.\nshmem_idx += laneId / CHUNK_COPY_LINE_LANES;\n\n#pragma unroll\nfor (int i = 0; i < ((WARP_SIZE / 2) / CHUNK_COPY_LINES_PER_WARP) * 2;\ni++) {\n// Copy 16 bytes at once in each lane.\n*((int4 *)&shmem[shmem_idx][0] + (laneId % CHUNK_COPY_LINE_LANES)) =\n*lane_ptr;\n\n// Advance the global memory pointer and the shared memory index.\nlane_ptr = (int4 *)((uint8_t *)lane_ptr +\nK_GLOBAL * CHUNK_COPY_LINES_PER_WARP);\nshmem_idx += CHUNK_COPY_LINES_PER_WARP;\n}\n\n__syncthreads();\n\n// Compute a grid of C matrix tiles in each warp.\n#pragma unroll\nfor (int k_step = 0; k_step < CHUNK_K; k_step++) {\nwmma::fragment<wmma::matrix_a, M, N, K, uint8_t, wmma::row_major>\na[WARP_COL_TILES];\nwmma::fragment<wmma::matrix_b, M, N, K, uint8_t, wmma::col_major>\nb[WARP_ROW_TILES];\n\n#pragma unroll\nfor (int i = 0; i < WARP_COL_TILES; i++) {\nsize_t shmem_idx_a = (warpId / 2) * M * 2 + (i * M);\nconst uint8_t *tile_ptr = &shmem[shmem_idx_a][k_step * K];\n\nwmma::load_matrix_sync(a[i], tile_ptr, K * CHUNK_K + SKEW_UINT8);\n\n#pragma unroll\nfor (int j = 0; j < WARP_ROW_TILES; j++) {\nif (i == 0) {\n// Load the B matrix fragment once, because it is going to be\n// reused against the other A matrix fragments.\nsize_t shmem_idx_b = shmem_idx_b_off +\n     (WARP_ROW_TILES * N) * (warpId % 2) +\n     (j * N);\nconst uint8_t *tile_ptr = &shmem[shmem_idx_b][k_step * K];\n\nwmma::load_matrix_sync(b[j], tile_ptr, K * CHUNK_K + SKEW_UINT8);\n}\n\nwmma::mma_sync(c[i][j], a[i], b[j], c[i][j]);\n}\n}\n}\n\n__syncthreads();\n}\n\n// Store the D fragments to shared memory.\n#pragma unroll\nfor (int i = 0; i < WARP_COL_TILES; i++) {\n#pragma unroll\nfor (int j = 0; j < WARP_ROW_TILES; j++) {\n#pragma unroll\n// Uniform, point-wise transformations of ALL fragment elements by ALL\n// threads in the warp are well-defined even though element indices\n// within fragment storage are not defined.\nfor (int t = 0; t < c[i][j].num_elements; t++) {\nc[i][j].x[t] = ((c[i][j].x[t] * alpha) >> integer);\n}\n\nint *tile_ptr = shmem_warp_tile_ptr + i * SHMEM_STRIDE * K + j * N;\n\nwmma::store_matrix_sync(tile_ptr, c[i][j], SHMEM_STRIDE,wmma::mem_row_major);\n}\n}\n\n__syncthreads();\n\n// Now that shared memory contains all the D tiles, stream them to global\n// memory.\nuint8_t *dst_gmem_warp_stream_ptr = &D[gmem_idx];\n\n#pragma unroll\nfor (int i = 0; i < K; i++) {\nfor(int k = 0; k < 4; k++){\nuint8_t val_tmp = (uint8_t)*((int *)(shmem_warp_stream_ptr + SHMEM_STRIDE * i + laneId * 4 + k));\n*(dst_gmem_warp_stream_ptr + GLOBAL_MEM_STRIDE * i + laneId * 4 + k) = \nval_tmp > 0 ? val_tmp:0;\n}\n}\n__syncthreads();\n}\n}", "gridDim": [68, 1, 1], "blockDim": [256, 1, 1], "dynamic_shared_memory": 65536}]