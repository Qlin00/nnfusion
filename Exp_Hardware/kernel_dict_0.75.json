{"1": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "2": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "3": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "4": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "5": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "6": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "7": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "8": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "9": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "10": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "11": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "12": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "13": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "14": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "15": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "16": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "17": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "18": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "19": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "20": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "21": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "22": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "23": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "24": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "25": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "26": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "27": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "28": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "29": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "30": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "31": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "32": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "33": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "34": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "35": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "36": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "37": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "38": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "39": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "40": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "41": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "42": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "43": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "44": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "45": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "46": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "47": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "48": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "49": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "50": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "51": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "52": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "53": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "54": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "55": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "56": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "57": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "58": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "59": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "60": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "61": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "62": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "63": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "64": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "65": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "66": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "67": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "68": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "69": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "70": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "71": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "72": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "73": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "74": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "75": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "76": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "77": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "78": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "79": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "80": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "81": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "82": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "83": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "84": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "85": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "86": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "87": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "88": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "89": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "90": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "91": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "92": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "93": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "94": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "95": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "96": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "97": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "98": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "99": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "100": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "101": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "102": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "103": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "104": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "105": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "106": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "107": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "108": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "109": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "110": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "111": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "112": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "113": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "114": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "115": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "116": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "117": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "118": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "119": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "120": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "121": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "122": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "123": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "124": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "125": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "126": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "127": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "128": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "129": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "130": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "131": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "132": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "133": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "134": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "135": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "136": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "137": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "138": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "139": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "140": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "141": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "142": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "143": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 1024;\n    const int N = 4096;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 128]}}, "144": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 4096;\n    const int K = 4096;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [128, 32]}}, "145": {"code": "// dim3 dimBlock((BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N));\n// dim3 dimGrid(M / BLOCK_SIZE_M, N / BLOCK_SIZE_N);\n__global__ void MatMul_TILE_THREAD_GENERAL_NO_SHARED(float *input0, float *input1, float *input2, float *input3, float *output0) {\n\tfloat *g_vec = input0;\n\tfloat *g_mat_data = input1;\n\tint *g_mat_index = (int*)input2;\n\tfloat *bias = input3;\n\tfloat *g_data = output0;\n\n\tconst float SPARSITY = 0.75;\n    const int M = 32;\n    const int K = 1024;\n    const int N = 1024;\n    const int K_sparse = int(K * SPARSITY);\n    const int BLOCK_SIZE_M = 32;\n    const int BLOCK_SIZE_K = 32;\n    const int BLOCK_SIZE_N = 32;\n    const int THREAD_SIZE_M = 16;\n    const int THREAD_SIZE_N = 1;\n\n    const int BANK_VAL = 32;\n    const int NUM_BANK = K / BANK_VAL;\n\n    const int BANK_NUM_PER_BLOCK = BLOCK_SIZE_K / BANK_VAL;\n    const int BLOCK_SIZE_K_SPARSE = int(BLOCK_SIZE_K * (1-SPARSITY));\n    const int LEN_OF_BANK_PER_SPARSE_BLOCK = BLOCK_SIZE_K_SPARSE / BANK_NUM_PER_BLOCK;\n\n\tint M_BLOCK_START = blockIdx.x * BLOCK_SIZE_M;\n\tint N_BLOCK_START = blockIdx.y * BLOCK_SIZE_N;\n\n\tconst int A_THREADS_PER_ROW = BLOCK_SIZE_K / 4;\n\tconst int B_THREADS_PER_ROW = BLOCK_SIZE_N / 4;\n\n\tconst int THREADS_PER_BLOCK = (BLOCK_SIZE_M / THREAD_SIZE_M) * (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tconst int A_STRIDES = THREADS_PER_BLOCK / A_THREADS_PER_ROW;\n\tconst int B_STRIDES = THREADS_PER_BLOCK / B_THREADS_PER_ROW;\n\n\t__shared__ float A_shared[BLOCK_SIZE_M * BLOCK_SIZE_K];\n\n\tfloat B_reg[THREAD_SIZE_N];\n\tint B_reg_index[THREAD_SIZE_N];\n\tfloat C_reg[THREAD_SIZE_M][THREAD_SIZE_N] = {0};\n\n\tint tid = threadIdx.x;\n\n\tint t_N = tid % (BLOCK_SIZE_N / THREAD_SIZE_N);\n\tint t_M = tid / (BLOCK_SIZE_N / THREAD_SIZE_N);\n\n\tint A_BLOCK_ROW_START = tid / A_THREADS_PER_ROW;\n\n\tint A_BLOCK_COL_START = tid % A_THREADS_PER_ROW * 4;\n\n\tfor(int K_BLOCK_START = 0, K_SPARSE_BLOCK_START = 0; K_BLOCK_START < K; K_BLOCK_START += BLOCK_SIZE_K, K_SPARSE_BLOCK_START += BLOCK_SIZE_K_SPARSE){\n\t\tfloat *A_global_ptr = g_vec + M_BLOCK_START * K + K_BLOCK_START;\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_M; i += A_STRIDES){\n\t\t\t*(float4 *)(A_shared + (i + A_BLOCK_ROW_START) * BLOCK_SIZE_K + A_BLOCK_COL_START) = \n\t\t\t\t*(float4 *)(A_global_ptr + (i + A_BLOCK_ROW_START) * K + A_BLOCK_COL_START);\n\t\t}\n\n\t\t__syncthreads();\n\n\t\t#pragma unroll\n\t\tfor(int i = 0; i < BLOCK_SIZE_K_SPARSE;i += 1){\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tB_reg[k] = g_mat_data[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t\tB_reg_index[k] = g_mat_index[(K_SPARSE_BLOCK_START + i) * N + N_BLOCK_START + t_N * THREAD_SIZE_N + k];\n\t\t\t}\n\t\t\t#pragma unroll\n\t\t\tfor(int k = 0; k < THREAD_SIZE_N; k += 1){\n\t\t\t\tint bank_idx = i / LEN_OF_BANK_PER_SPARSE_BLOCK;\n\t\t\t\tint B_index = B_reg_index[k] % BANK_VAL+bank_idx * BANK_VAL;\n\t\t\t\t#pragma unroll\n\t\t\t\tfor(int j = 0; j < THREAD_SIZE_M; j += 1){\n\t\t\t\t\tC_reg[j][k] += B_reg[k] * A_shared[(t_M * THREAD_SIZE_M+j) * BLOCK_SIZE_K + B_index];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#pragma unroll\n\tfor(int i = 0; i < THREAD_SIZE_M; i += 1){\n\t\t#pragma unroll\n\t\tfor(int j = 0; j < THREAD_SIZE_N; j += 1){\n\t\t\tg_data[(BLOCK_SIZE_M * blockIdx.x + THREAD_SIZE_M * t_M + i) * N + BLOCK_SIZE_N * blockIdx.y + THREAD_SIZE_N * t_N + j] = C_reg[i][j];\n\t\t}\n\t}\n}", "launch_config": {"dimBlock": [64, 1], "dimGrid": [1, 32]}}}